from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import filters

from filters import PHONE_REGEXP
from filters import IsPrivate
from keyboards.default import kb_menu

from loader import dp

from states import register

@dp.message_handler(IsPrivate(), Command('register')) # /register
async def register_(message: types.Message):
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –µ–≥–æ –∏–º–µ–Ω–µ–º –∏–∑ first_name, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
    name = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=f'{message.from_user.first_name}')
            ],
        ],
        resize_keyboard=True
    )


    await message.answer('–ü—Ä–∏–≤–µ—Ç, —Ç—ã –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, \n–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è', reply_markup=name)
    await register.test1.set()

@dp.message_handler(state=register.test1)
async def state1(message: types.Message, state:FSMContext):
    answer = message.text

    await state.update_data(text1=answer)
    await message.answer(f'{answer}, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
    await register.test2.set()

@dp.message_handler(state=register.test2)
async def state2(message: types.Message, state:FSMContext):
    answer = message.text

    await state.update_data(text2=answer)
    data = await state.get_data()
    name = data.get('text1')
    #years = data.get('text2')
    await message.answer(f'{name}, –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞?')
    await register.test3.set()

@dp.message_handler(filters.Regexp(PHONE_REGEXP), state=register.test3)
async def state4(message: types.Message, state:FSMContext):
    answer = message.text

    print('–¥–∞–∞')
    await state.update_data(text3=answer)
    data = await state.get_data()
    name = data.get('text1')
    print(name)
    years = data.get('text2')
    phone =  data.get('text3')
    print(data)
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n'
                         f'–¢–≤–æ–µ –∏–º—è {name}\n'
                         f'–¢–µ–±–µ {years} –ª–µ—Ç\n'
                         f'–¢–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}', reply_markup=kb_menu)
    await state.finish()


@dp.message_handler(state=register.test3)
async def state3(message: types.Message, state:FSMContext):
    answer = message.text

    await state.update_data(text3=answer)
    data = await state.get_data()
    name = data.get('text1')
    print(name)
    years = data.get('text2')
    phone =  data.get('text3')
    print(data)
    await message.answer('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω üò¨, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?', reply_markup=kb_menu)
    await register.test3.set()